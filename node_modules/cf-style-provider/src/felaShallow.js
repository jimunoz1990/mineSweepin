import PropTypes from 'prop-types';
import { shallow as enzymeShallow } from 'enzyme';
import createRenderer from './createRenderer';
import { renderToString } from 'fela-tools';
import cssbeautify from 'cssbeautify';
import toJson from 'enzyme-to-json';
import { variables as themeConstants } from 'cf-style-const'; // eslint-disable-line behance/no-deprecated
import { createTheme, THEME_CHANNEL } from 'fela-bindings';
import { ThemeProvider } from 'cf-style-container';

const mergeOptions = (options, renderer, theme) => {
  return {
    childContextTypes: {
      [THEME_CHANNEL]: PropTypes.object,
      renderer: PropTypes.object
    },
    contextTypes: {
      [THEME_CHANNEL]: PropTypes.object,
      renderer: PropTypes.object
    },
    context: {
      renderer,
      [THEME_CHANNEL]: theme ? createTheme(theme) : createTheme(themeConstants)
    },
    ...options
  };
};

const shallow = (node, options = {}) => {
  const rootRenderer = createRenderer({
    dev: true
  });

  const wrapper = enzymeShallow(node, mergeOptions(options, rootRenderer));

  //if we are dealing with a fela node, or a ThemeProvider then dive until we get to a non-fela node (for rendering)
  const dive = (wrapper, renderer, theme = null) => {
    const reactElement = wrapper.get(0);

    //if the element in question is a ThemeProvider, use its theme and pass it down
    //the tree in context
    if (reactElement && reactElement.type === ThemeProvider) {
      theme = reactElement.props.theme;
    }

    if (
      reactElement &&
      reactElement.type &&
      (reactElement.type._isFelaComponent ||
        reactElement.type === ThemeProvider)
    ) {
      const mergedOptions = mergeOptions(options, renderer, theme);
      return dive(wrapper.dive(mergedOptions), renderer, theme);
    }
    return wrapper;
  };

  const componentSnapshot = wrapper => {
    const options = {
      indent: '  ',
      openbrace: 'end-of-line',
      autosemicolon: false
    };

    let renderer = rootRenderer;
    let wrapperToSnapshot = wrapper;

    const reactElement = wrapper.get(0);

    //if the element being snapshot is a fela component or a ThemeProvider
    //we need to dive into it and keep shallow rendering. for this we will use
    if (
      reactElement &&
      reactElement.type &&
      (reactElement.type._isFelaComponent ||
        reactElement.type === ThemeProvider)
    ) {
      //use a new renderer to capture the styles just by rendering this enzyme wrapper
      renderer = createRenderer({
        dev: true
      });
      wrapperToSnapshot = dive(wrapper, renderer);
    }

    return {
      component: toJson(wrapperToSnapshot),
      styles: `\n${cssbeautify(renderToString(renderer), options)}\n`
    };
  };

  //if the enzyme wrapper is around a single node, returns an object with keys: component, style
  //otherwise returns an array where each element in the array is an object with keys: component, style
  //where the snapshot for that element is stored.
  const snapshot = enzymeWrapper => {
    if (enzymeWrapper.length === 1) {
      return componentSnapshot(enzymeWrapper);
    }
    return enzymeWrapper.map(wrapper => {
      return componentSnapshot(wrapper);
    });
  };

  return {
    wrapper,
    snapshot
  };
};

export default shallow;
