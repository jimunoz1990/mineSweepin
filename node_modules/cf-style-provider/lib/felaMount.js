'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // eslint-disable-line behance/no-deprecated


var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _enzyme = require('enzyme');

var _createRenderer = require('./createRenderer');

var _createRenderer2 = _interopRequireDefault(_createRenderer);

var _felaTools = require('fela-tools');

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _cssbeautify = require('cssbeautify');

var _cssbeautify2 = _interopRequireDefault(_cssbeautify);

var _cfStyleConst = require('cf-style-const');

var _felaBindings = require('fela-bindings');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mount = (node, options = {}) => {
  const renderer = (0, _createRenderer2.default)({
    dev: true
  });

  const wrapper = (0, _enzyme.mount)(node, _extends({
    childContextTypes: {
      [_felaBindings.THEME_CHANNEL]: _propTypes2.default.object,
      renderer: _propTypes2.default.object
    },
    contextTypes: {
      [_felaBindings.THEME_CHANNEL]: _propTypes2.default.object,
      renderer: _propTypes2.default.object
    },
    context: {
      renderer,
      [_felaBindings.THEME_CHANNEL]: (0, _felaBindings.createTheme)(_cfStyleConst.variables)
    }
  }, options));

  const snapshot = wrapper => {
    const options = {
      indent: '  ',
      openbrace: 'end-of-line',
      autosemicolon: false
    };

    return {
      component: (0, _enzymeToJson2.default)(wrapper),
      styles: `\n${(0, _cssbeautify2.default)((0, _felaTools.renderToString)(renderer), options)}\n`
    };
  };

  return {
    wrapper,
    snapshot
  };
};

exports.default = mount;