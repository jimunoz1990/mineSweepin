'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // eslint-disable-line behance/no-deprecated


var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _enzyme = require('enzyme');

var _createRenderer = require('./createRenderer');

var _createRenderer2 = _interopRequireDefault(_createRenderer);

var _felaTools = require('fela-tools');

var _cssbeautify = require('cssbeautify');

var _cssbeautify2 = _interopRequireDefault(_cssbeautify);

var _enzymeToJson = require('enzyme-to-json');

var _enzymeToJson2 = _interopRequireDefault(_enzymeToJson);

var _cfStyleConst = require('cf-style-const');

var _felaBindings = require('fela-bindings');

var _cfStyleContainer = require('cf-style-container');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const mergeOptions = (options, renderer, theme) => {
  return _extends({
    childContextTypes: {
      [_felaBindings.THEME_CHANNEL]: _propTypes2.default.object,
      renderer: _propTypes2.default.object
    },
    contextTypes: {
      [_felaBindings.THEME_CHANNEL]: _propTypes2.default.object,
      renderer: _propTypes2.default.object
    },
    context: {
      renderer,
      [_felaBindings.THEME_CHANNEL]: theme ? (0, _felaBindings.createTheme)(theme) : (0, _felaBindings.createTheme)(_cfStyleConst.variables)
    }
  }, options);
};

const shallow = (node, options = {}) => {
  const rootRenderer = (0, _createRenderer2.default)({
    dev: true
  });

  const wrapper = (0, _enzyme.shallow)(node, mergeOptions(options, rootRenderer));

  //if we are dealing with a fela node, or a ThemeProvider then dive until we get to a non-fela node (for rendering)
  const dive = (wrapper, renderer, theme = null) => {
    const reactElement = wrapper.get(0);

    //if the element in question is a ThemeProvider, use its theme and pass it down
    //the tree in context
    if (reactElement && reactElement.type === _cfStyleContainer.ThemeProvider) {
      theme = reactElement.props.theme;
    }

    if (reactElement && reactElement.type && (reactElement.type._isFelaComponent || reactElement.type === _cfStyleContainer.ThemeProvider)) {
      const mergedOptions = mergeOptions(options, renderer, theme);
      return dive(wrapper.dive(mergedOptions), renderer, theme);
    }
    return wrapper;
  };

  const componentSnapshot = wrapper => {
    const options = {
      indent: '  ',
      openbrace: 'end-of-line',
      autosemicolon: false
    };

    let renderer = rootRenderer;
    let wrapperToSnapshot = wrapper;

    const reactElement = wrapper.get(0);

    //if the element being snapshot is a fela component or a ThemeProvider
    //we need to dive into it and keep shallow rendering. for this we will use
    if (reactElement && reactElement.type && (reactElement.type._isFelaComponent || reactElement.type === _cfStyleContainer.ThemeProvider)) {
      //use a new renderer to capture the styles just by rendering this enzyme wrapper
      renderer = (0, _createRenderer2.default)({
        dev: true
      });
      wrapperToSnapshot = dive(wrapper, renderer);
    }

    return {
      component: (0, _enzymeToJson2.default)(wrapperToSnapshot),
      styles: `\n${(0, _cssbeautify2.default)((0, _felaTools.renderToString)(renderer), options)}\n`
    };
  };

  //if the enzyme wrapper is around a single node, returns an object with keys: component, style
  //otherwise returns an array where each element in the array is an object with keys: component, style
  //where the snapshot for that element is stored.
  const snapshot = enzymeWrapper => {
    if (enzymeWrapper.length === 1) {
      return componentSnapshot(enzymeWrapper);
    }
    return enzymeWrapper.map(wrapper => {
      return componentSnapshot(wrapper);
    });
  };

  return {
    wrapper,
    snapshot
  };
};

exports.default = shallow;