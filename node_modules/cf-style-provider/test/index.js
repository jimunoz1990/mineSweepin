import React from 'react';
import { StyleProvider } from '../src/index';
import felaSnapshot from '../src/felaSnapshot';
import felaShallow from '../src/felaShallow';
import felaMount from '../src/felaMount';
import { createComponent } from '../../cf-style-container/src/index';
import renderer from 'react-test-renderer';
import { render } from 'react-dom';
import { mount } from 'enzyme';
import { html as beautify } from 'js-beautify';
import { applyTheme } from 'cf-style-container';

export const boxRules = ({ size = 10, theme }) => {
  return {
    width: size + 'px',
    height: size + 'px',
    color: theme.color.grass,
    backgroundColor: theme.foo,
    fontSize: theme.fontSize
  };
};

export const innerBoxRules = ({ size = 10, theme }) => {
  return {
    backgroundColor: theme.color.grass,
    width: size + 'px',
    height: size + 'px'
  };
};

const themeBoxRules = theme => {
  return {
    foo: theme.color.black
  };
};

const extraThemeBoxRules = theme => {
  return {
    fontSize: theme.fontSizes[0]
  };
};

const UnstyledBox = createComponent(boxRules);
const StyledBox = applyTheme(UnstyledBox, themeBoxRules, extraThemeBoxRules);
const InnerStyledBox = applyTheme(UnstyledBox, themeBoxRules);
const InnerBox = createComponent(innerBoxRules);
const NoBox = createComponent(boxRules);

describe('StyleProvider', () => {
  it('should render', () => {
    const component = renderer.create(
      <StyleProvider>
        <div />
      </StyleProvider>
    );
    expect(component.toJSON()).toMatchSnapshot();
  });

  it('should render styles', () => {
    const htmlNode = document.createElement('div');
    document.body.appendChild(htmlNode);

    const Foo = createComponent(() => ({
      margin: '10px',
      color: 'red',
      desktop: {
        fontSize: '1px'
      }
    }));

    render(
      <StyleProvider>
        <Foo />
      </StyleProvider>,
      htmlNode
    );

    expect(
      beautify(document.documentElement.outerHTML, { indent_size: 2 })
    ).toMatchSnapshot();
  });

  it('should pass custom props through', () => {
    const Foo = () => <div />;
    const wrapper = mount(
      <StyleProvider number={10}>
        <Foo />
      </StyleProvider>
    );
    wrapper.setProps({ something: true });
    expect(wrapper.prop('something')).toBeTruthy();
    expect(wrapper.prop('number')).toBe(10);
  });
});

describe('felaSnapshot', () => {
  it('should return a formatted snapshot object with DOM and styles', () => {
    const Div = createComponent(() => ({ color: 'black' }));
    const snapshot = felaSnapshot(<Div />);
    expect(snapshot).toMatchSnapshot();
  });
});

describe('felaShallow', () => {
  it('should return a formatted snapshot object with DOM and styles', () => {
    const Div = createComponent(() => ({ color: 'black' }));
    const { wrapper, snapshot } = felaShallow(<Div />);
    expect(snapshot(wrapper)).toMatchSnapshot();
  });

  it('snapshot two levels deep', () => {
    const { wrapper, snapshot } = felaShallow(
      <StyledBox>
        <InnerStyledBox>
          <InnerBox>hello</InnerBox>
          <InnerBox>hello</InnerBox>
        </InnerStyledBox>
      </StyledBox>
    );

    expect(snapshot(wrapper)).toMatchSnapshot('Level 1');

    const child = wrapper.find(InnerStyledBox);
    expect(snapshot(child)).toMatchSnapshot('Level 2');

    const innerChild = wrapper.find(InnerBox);
    expect(snapshot(innerChild)).toMatchSnapshot('Level 3');

    const noChild = wrapper.find(NoBox);
    expect(snapshot(noChild)).toMatchSnapshot('no child');
  });
});

describe('felaMount', () => {
  it('Mount snapshot', () => {
    const { wrapper, snapshot } = felaMount(
      <StyledBox>
        <InnerStyledBox>
          <InnerBox>hello</InnerBox>
          <InnerBox>hello</InnerBox>
        </InnerStyledBox>
      </StyledBox>
    );

    expect(snapshot(wrapper)).toMatchSnapshot('Mounted');
  });
});
