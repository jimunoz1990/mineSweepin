var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import PropTypes from 'prop-types';
import { mount as enzymeMount } from 'enzyme';
import createRenderer from './createRenderer';
import { renderToString } from 'fela-tools';
import toJson from 'enzyme-to-json';
import cssbeautify from 'cssbeautify';
import { variables as themeConstants } from 'cf-style-const'; // eslint-disable-line behance/no-deprecated
import { createTheme, THEME_CHANNEL } from 'fela-bindings';

var mount = function mount(node) {
  var _childContextTypes, _contextTypes;

  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var renderer = createRenderer({
    dev: true
  });

  var wrapper = enzymeMount(node, _extends({
    childContextTypes: (_childContextTypes = {}, _defineProperty(_childContextTypes, THEME_CHANNEL, PropTypes.object), _defineProperty(_childContextTypes, 'renderer', PropTypes.object), _childContextTypes),
    contextTypes: (_contextTypes = {}, _defineProperty(_contextTypes, THEME_CHANNEL, PropTypes.object), _defineProperty(_contextTypes, 'renderer', PropTypes.object), _contextTypes),
    context: _defineProperty({
      renderer: renderer
    }, THEME_CHANNEL, createTheme(themeConstants))
  }, options));

  var snapshot = function snapshot(wrapper) {
    var options = {
      indent: '  ',
      openbrace: 'end-of-line',
      autosemicolon: false
    };

    return {
      component: toJson(wrapper),
      styles: '\n' + cssbeautify(renderToString(renderer), options) + '\n'
    };
  };

  return {
    wrapper: wrapper,
    snapshot: snapshot
  };
};

export default mount;