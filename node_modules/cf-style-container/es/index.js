var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/* eslint-disable behance/no-deprecated */
import React, { Component } from 'react';
import PropTypes from 'prop-types';
import { combineRules } from 'fela';
import { ThemeProvider, connect, withTheme, createComponent as createFelaComponent } from 'react-fela'; // eslint-disable-line behance/no-deprecated
import { capitalize } from 'underscore.string';
import mergeThemes from './mergeThemes';

var createComponent = function createComponent(rule) {
  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'div';
  var passThroughProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return createFelaComponent(rule, type, type.propTypes ? passThroughProps.concat(Object.keys(type.propTypes)) : passThroughProps);
};

var applyTheme = function applyTheme(ComponentToWrap) {
  for (var _len = arguments.length, themes = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    themes[_key - 1] = arguments[_key];
  }

  var ThemedComponent = function (_Component) {
    _inherits(ThemedComponent, _Component);

    function ThemedComponent() {
      _classCallCheck(this, ThemedComponent);

      return _possibleConstructorReturn(this, (ThemedComponent.__proto__ || Object.getPrototypeOf(ThemedComponent)).apply(this, arguments));
    }

    _createClass(ThemedComponent, [{
      key: 'render',
      value: function render() {
        return React.createElement(
          ThemeProvider,
          { theme: mergeThemes.apply(undefined, [this.props.theme || {}].concat(themes)) },
          React.createElement(ComponentToWrap, this.props)
        );
      }
    }]);

    return ThemedComponent;
  }(Component);

  ThemedComponent._isFelaComponent = true;
  ThemedComponent.displayName = 'Themed' + ComponentToWrap.displayName;
  ThemedComponent.propTypes = {
    theme: PropTypes.object
  };
  return withTheme(ThemedComponent);
};

var withRenderer = function withRenderer(ComponentToWrap) {
  var WithRendererComponent = function (_Component2) {
    _inherits(WithRendererComponent, _Component2);

    function WithRendererComponent() {
      _classCallCheck(this, WithRendererComponent);

      return _possibleConstructorReturn(this, (WithRendererComponent.__proto__ || Object.getPrototypeOf(WithRendererComponent)).apply(this, arguments));
    }

    _createClass(WithRendererComponent, [{
      key: 'render',
      value: function render() {
        return React.createElement(ComponentToWrap, _extends({ renderer: this.context.renderer }, this.props));
      }
    }]);

    return WithRendererComponent;
  }(Component);

  WithRendererComponent.displayName = 'WithRenderer' + ComponentToWrap.displayName;
  WithRendererComponent.contextTypes = { renderer: PropTypes.object };
  return WithRendererComponent;
};

var createComponentStyles = function createComponentStyles(styleFunctions, component) {
  return connect(styleFunctions)(component);
};

var applyStaticStyles = function applyStaticStyles(staticStyles, ComponentToWrap) {
  var CompWithStaticStyles = function (_React$PureComponent) {
    _inherits(CompWithStaticStyles, _React$PureComponent);

    function CompWithStaticStyles() {
      _classCallCheck(this, CompWithStaticStyles);

      return _possibleConstructorReturn(this, (CompWithStaticStyles.__proto__ || Object.getPrototypeOf(CompWithStaticStyles)).apply(this, arguments));
    }

    _createClass(CompWithStaticStyles, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        var contextTheme = this.props.theme || {};
        staticStyles = typeof staticStyles === 'function' ? staticStyles(contextTheme) : staticStyles;
        this.context.renderer.renderStatic(staticStyles);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(ComponentToWrap, this.props);
      }
    }]);

    return CompWithStaticStyles;
  }(React.PureComponent);

  CompWithStaticStyles.contextTypes = {
    renderer: PropTypes.object
  };

  CompWithStaticStyles.propTypes = {
    theme: PropTypes.object
  };

  return withTheme(CompWithStaticStyles);
};

export { createComponent, applyTheme, ThemeProvider, connect, combineRules, createComponentStyles, capitalize, withTheme, withRenderer, applyStaticStyles };